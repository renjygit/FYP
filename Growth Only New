import numpy as np
import matplotlib.pyplot as plt
import sys
import csv

# Define the van Leer flux limiter function
def vanLeerFunc(X):
    return (X + np.abs(X)) / (1 + X)

# Define required constants
R = 8.314
kB = 1.38e-23
NA = 6.022e23
A = 4e3
VmMolar = 3.2996e-5 # m^3 mol^-1 - molar volume of monomer
rmMolar = (3/4*np.pi) * pow(VmMolar, 1/3)
Vm = VmMolar / NA # (4/3)*np.pi*pow(rm,3)
rm = pow((3*Vm) / (4*np.pi), (1/3)) # 1.87e-10
D = 1e-12
Vtot = 1e-4 #0.0252-3 # m^3
MInf = 1e-2 #mol m^-3 #
u = 0.42 # coagulation parameter
gamma = 0.2 #0.4 # J m^-2 - surface energy
k = 1e12 # J mol^-1 m^-1 - constant in the exponent of the distribution function
kr = 1.6e-9
density = 5.816e3 # kg m^-3
MW = 0.09586 # kg mol^-1 - monomeric molecular weight
Q = (4*np.pi*density) / (3 * MW * Vtot * MInf)
smallVal = 1e-30

# Define timesteps to iterate through & create an array
tmax = 15e-2 #s
tdiff = 3e-5
tmin = tdiff
timeArray = np.linspace(tdiff, tmax, int((tmax-tmin+tdiff)/tdiff))


# Define radius bins
rdiff =  2e-11 # m
rmax = 8.1e-9
rmin = 2e-10
rBins = np.linspace(rmin,rmax,int((rmax-rmin+rdiff)/rdiff))

# Define temperature variable & heating rate
Temp = 503 # 453
Tf = 567
HR = 0.025 # K s^-1 (1.5 K min^-1)

# Define supersaturation variable & array
SS = 5e2
SSArray = [SS]

# Create an array of arrays to hold number of nuclei in each radius bin for different timesteps
NArraysArray = [[]]

# Give number of nanopartices initially
NNumMole = 60e-6 # mol
NNum = NNumMole * NA # number
print("Initial number of nanoparticles = " + str(NNum))

# Create the input distribution of nanoparticles
sum = 0
for r in rBins:
    g = (1 / (1e-10 * np.sqrt((2*np.pi)))) * np.exp(-0.5*(np.power((r - 1e-9)/(1e-10), 2))) # Normal distribution with mean radius 1e-9 m & standard deviation 1e-10 m
    gN = NNum * g * rdiff
    
    sum += gN # Calculated to check this sums to NNum (approximately)
    
    NArraysArray[0].append(gN)
print("Sum of nanoparticles in initial distribution = " + str(sum))
print(NArraysArray[0])

NNumArray = [np.sum(NArraysArray[0])]

#print(list(zip(NArraysArray[0], rBins)))

# Plot the initial distribution of nanoparticles
plt.plot(rBins, NArraysArray[0])
plt.title("Nanoparticles number against radius at t = 0")
plt.ylim(0, 4.5e18)
plt.show()

# Create an array to hold the mean radius values
NArrayAvgR = [np.average(rBins, weights = NArraysArray[0])]
print("Initial avg N = " + str(NArrayAvgR[0]))


timeCount = 0 # Used to track number of time iterations
# Main loop steps forward in time
for time in timeArray:
    timeCount += 1

    #print("temp " +str(Temp))
    
    # Calculate the critical radius
    rCrit = (2*gamma*VmMolar) / (R*Temp*np.log(SS))
    #print("rCrit = " + str(rCrit))
    
    # Calculate the de-dimensionalised variables
    phi = (R * Temp) / (2 * gamma *VmMolar)
    psi = phi**2 * D * VmMolar * MInf
    zeta = 1e-3 # (D * phi) / kr
    tau = time * psi

    # Add a new empty array to the N array of arrays to hold the newly calculated N values
    NArraysArray.append([])
    # Create empty arrays for the SS integral elements and the N values at radii values of (i+1/2) and (i-1/2) (reset each time iteration)
    SSSumsArray = []
    NForwardList = []
    NBackwardList = []
    
    growthRateInterfaceArray = []
    NInterfaceArray = []
    rNum = -1
    for r in rBins: # start with interface to right of first bin (nothing can pass through interface to left) and end with interface to left of final bin (nothing can pass through interface to right)
        rNum += 1
        if rNum != (len(rBins) - 1): # do not calculate the value at the interface to the right of the last bin (there are N-1 interfaces)
            betaPlus = (r+0.5*rdiff) * phi # de-dimensionalised radius
            growthRateInterfaceDD = (SS - np.exp(1/betaPlus))/(betaPlus + zeta) # De-dimensionalised
            growthRateInterface = growthRateInterfaceDD * (psi/phi) # Re-dimensionalised
            growthRateInterfaceArray.append(growthRateInterface)
            
            if growthRateInterface > 0: # zero case?
                deltapos = NArraysArray[0][rNum+1] - NArraysArray[0][rNum]
                if rNum == 0: # if the growth rate at the first interface is postive, Ni-1 doesnt exist here so set deltaneg = 0 or Ni-1 = 0?
                    deltaneg = 0
                    #deltaneg = NArraysArray[0][rNum] - 0 
                else:
                    deltaneg = NArraysArray[0][rNum] - NArraysArray[0][rNum-1]

            
                # Add a small constant to deltapos and deltaneg to avoid division by 0
                if abs(deltapos) <= smallVal:
                    if r >= NArrayAvgR[timeCount-1]:
                        deltapos = -smallVal
                    else:
                        deltapos = smallVal

                if abs(deltaneg) <= smallVal:
                    if r >= NArrayAvgR[timeCount-1]:
                        deltaneg = -smallVal
                    else:
                        deltaneg = smallVal
                        
                NInterface = NArraysArray[0][rNum] + 0.5*vanLeerFunc(deltapos/deltaneg)*deltaneg #Ni+1/2
                if rNum == 0:
                    print("NInterface for first radius bin = " + str(deltapos/deltaneg))
                NInterfaceArray.append(NInterface)
            else:
                if rNum == (len(rBins) - 2): # if the growth rate at the last interface is negative, Ni+1 doesnt exist here so set deltapos = 0 or Ni+1 = 0?
                    deltapos = 0
                    #deltapos = 0 - NArraysArray[0][rNum+1]
                else:
                    deltapos = NArraysArray[0][rNum+2] - NArraysArray[0][rNum+1]
                deltaneg = NArraysArray[0][rNum+1] - NArraysArray[0][rNum]
                
                # Add a small constant to deltapos and deltaneg to avoid division by 0
                if abs(deltapos) <= smallVal:
                    # Add a small constant to deltapos and deltaneg to avoid division by 0
                    if r >= NArrayAvgR[timeCount-1]:
                        deltapos = -smallVal
                    else:
                        deltapos = smallVal

                if abs(deltaneg) <= smallVal:
                    if r >= NArrayAvgR[timeCount-1]:
                        deltaneg = -smallVal
                    else:
                        deltaneg = smallVal
                        
                NInterface = NArraysArray[0][rNum] - 0.5*vanLeerFunc(deltaneg/deltapos)*deltapos #Ni-1/2
                if rNum == 0:
                    print("NInterface for first radius bin = " + str(vanLeerFunc(deltapos/deltaneg)))
                NInterfaceArray.append(NInterface)


    i = -1  # Used to count through rBins to find rBins element closest in value to rCrit so that the appopriate NArraysArray value can be chosen to plot the rCrit value
    rCount = -1 # Keep track of the number of radius iterations (resets each time iteration)   
    for r in rBins:
        rCount += 1
        
        if rCrit > r:
            i += 1    
        
        # Calculate the intermediate value of N, i.e. the nucleated N (for this radius value)
        Nprime = NArraysArray[0][rCount] + 0 # This adds 0 for the growth only case, since there is no nucleation

        # Check Courant condition & stop the program if not satisfied
        if rCount != (len(rBins) - 1):
            if (growthRateInterfaceArray[rCount] * tdiff/rdiff) > 1: # don't check -ve growth values as these are corrected by setting values of n less than 0 to 0
                print("Courant condition not satisfied.")
                print("Courant value for growthratepos " + str(growthRateInterfaceArray[rCount] * tdiff/rdiff))
                sys.exit()    
        
        
            # Calculate new N & add to the array
            if rCount == 0 or rCount == (len(rBins) - 2):
                if rCount == 0:
                    NBinChange2 = - (tdiff/rdiff) * (growthRateInterfaceArray[rCount]*NInterfaceArray[rCount])
                    if NBinChange2 < 0 and np.abs(NBinChange2) > NArraysArray[0][rCount]: # avoid taking more from a bin than is present in the bin
                        NBinChange2 = -NArraysArray[0][rCount]
                        
                    print("NBinChange for first radius bin = " + str(NBinChange2))
                    NNew = Nprime + NBinChange2  # Calculate new N for first bin using only flow into bin from right interface
                    print("Nnew for first radius bin = " + str(NNew))
                else:
                    NBinChange3 = - (tdiff/rdiff) * -(growthRateInterfaceArray[rCount-1]*NInterfaceArray[rCount-1])
                    if NBinChange3 < 0 and np.abs(NBinChange3) > NArraysArray[0][rCount]: # avoid taking more from a bin than is present in the bin 
                        NBinChange3 = -NArraysArray[0][rCount]
                        
                    NNew = Nprime + NBinChange3 # Calculate new N for last bin using only flow into bin from left interface
            else:
                NBinChange = - (tdiff/rdiff) * ((growthRateInterfaceArray[rCount]*NInterfaceArray[rCount]) - (growthRateInterfaceArray[rCount-1]*NInterfaceArray[rCount-1]))
                if NBinChange < 0 and np.abs(NBinChange) > NArraysArray[0][rCount]: # avoid taking more from a bin than is present in the bin
                    NBinChange = -NArraysArray[0][rCount]

                NNew = Nprime + NBinChange # Calculate general new N
        
        # Do not allow the non-physical case of negative amounts of nuclei
        if NNew < 0:
          NNew = 0
        
        NArraysArray[1].append(NNew)

        # Calculate element of SS integral for current r & add to array
        SSIntegralElement = pow(r,3) * (NArraysArray[1][rCount] - NArraysArray[0][rCount])
        SSSumsArray.append(SSIntegralElement)
        #print("Q * r^3 = " + str(Q*pow(r,3)))
        #print("SS Element = " + str(SSIntegralElement))
        
        """
        if timeCount % 1000 == 0:         
            if rCount == 100:
                print("delta pos = " + str(deltapos))
                print("delta neg = " + str(deltaneg))
                print("Nprime = " + str(Nprime))
                print("NNew = " + str(NNew))
                print("growthRatePos = " + str(growthRatePos))
                print("growthRateNeg = " + str(growthRateNeg))
        """
    
    # Add mean radius of N to the array
    print(NArraysArray[1])
    NArrayAvgR.append(np.average(rBins, weights = NArraysArray[1]))
    #print("Avg N radius = " + str(NArrayAvgR[timeCount]))
    # Delete N array for previous timestep (to conserve memory, since it is no longer needed)
    del NArraysArray[0]

        
    # Calculate SS value for this timestep & add to the array
    SS -= (Q * np.sum(SSSumsArray)) # Sum all integral element values and multiply by Q to approximate the integral (no precursor part to consider for growth only case)
    SSArray.append(SS)
    #print("SS " + str(SS))
    #print("   ")
    
    NNumArray.append(np.sum(NArraysArray[0]))
    
    if timeCount % 1 == 0:
        plt.plot(rBins, NArraysArray[0])
        plt.title("Nanoparticles number against radius at t = " + f'{time:.3g}')
        #plt.ylim(0, 4.5e18)
        plt.xlim(0,8e-9)
        plt.plot(rCrit, NArraysArray[0][i], 'ko')
        print("N at r Crit = " + str(NArraysArray[0][i]))
        plt.show()
        #print(NArraysArray[0])
    
    """
    # Increase the temperature by the heating rate up to the maximum
    if (Temp < Tf):
        Temp += tdiff*HR
    """
    
# Create new time array to include t = 0
timeArrayFull = np.linspace(0, tmax, int(((tmax-tmin+tdiff)/tdiff) + 1))

# Plot the final distribution of nanoparticles
plt.plot(rBins, NArraysArray[0])
plt.title("Final nanoparticle size distribution gamma = " + str(gamma))
#plt.ylim(0, 4.)
plt.plot(rCrit, NArraysArray[0][i], 'ko')
plt.show()


#print(NArrayAvgR)
# Plot mean radius against time
plt.plot(timeArrayFull, NArrayAvgR)
plt.title("Mean radius against time gamma = " + str(gamma))
plt.xscale('log')
plt.show()


# Plot supersaturation against time
plt.plot(timeArrayFull, SSArray)
plt.title("Supersaturation against time gamma = " + str(gamma))
plt.xscale('log')
plt.yscale('log')
plt.show()


# Plot the total number of nanoparticles over time
plt.plot(timeArrayFull, NNumArray)
plt.title("Number of nanoparticles over time gamma = " + str(gamma))
plt.xscale('log')
plt.show()
